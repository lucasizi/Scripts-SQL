drop table empregados;
drop table log_salario;
drop trigger TRG_SALARIO_AUD;

CREATE TABLE EMPREGADOS (
    CODIGO INT NOT NULL PRIMARY KEY,
    NOME VARCHAR2 (20),
    SALARIO DECIMAL(10,2)
);

CREATE TABLE LOG_SALARIO (
    CODIGO INT,
    SALARIO_ANTERIOR DECIMAL(10,2),
    SALARIO_ATUAL DECIMAL(10,2),
    DATA_ALTERACAO DATE,
    USUARIO VARCHAR2(20),
    OPERACAO VARCHAR2(10)
);

CREATE OR REPLACE TRIGGER TRG_SALARIO_AUD
AFTER INSERT ON EMPREGADOS
FOR EACH ROW
BEGIN
    INSERT INTO LOG_SALARIO(CODIGO, SALARIO_ANTERIOR, SALARIO_ATUAL, DATA_ALTERACAO, USUARIO, OPERACAO)
    VALUES (:NEW.CODIGO, :OLD.SALARIO, :NEW.SALARIO, SYSDATE, USER,'');
END;


-- TESTE INSERT
INSERT INTO EMPREGADOS VALUES (1,'Peter',2999);
INSERT INTO EMPREGADOS VALUES (2,'John',3499);

SELECT * FROM EMPREGADOS;
SELECT * FROM LOG_SALARIO;

-- TESTE UPDATE
UPDATE EMPREGADOS SET SALARIO = SALARIO*1.10 WHERE CODIGO = '1';

-- DESABILITANDO TRIGGER
ALTER TRIGGER TRG_SALARIO_AUD DISABLE;

-- APÓS DISABLE
INSERT INTO EMPREGADOS VALUES (3,'MARY',4499);

-- HABILITANDO A TRIGGER
ALTER TRIGGER TRG_SALARIO_AUD ENABLE;

-- EXEMPLO COM OPERADORES
-- EXEMPLO STATEMENTS/DECLARACAO DE OPERADORES
CREATE OR REPLACE TRIGGER TRG_SALARIO_AUD
AFTER INSERT OR DELETE OR UPDATE ON EMPREGADOS
FOR EACH ROW
DECLARE
    P_OPER VARCHAR2(10);
BEGIN
    IF INSERTING THEN
        P_OPER := 'INSERT';
        INSERT INTO LOG_SALARIO
        (CODIGO, SALARIO_ANTERIOR, SALARIO_ATUAL, DATA_ALTERACAO, USUARIO, OPERACAO)
        VALUES
        (:NEW.CODIGO, NULL, :NEW.SALARIO, SYSDATE, USER, P_OPER);
        
    ELSIF UPDATING THEN
        P_OPER := 'UPDATE';
        INSERT INTO LOG_SALARIO
        (CODIGO, SALARIO_ANTERIOR, SALARIO_ATUAL, DATA_ALTERACAO, USUARIO, OPERACAO)
        VALUES
        (:NEW.CODIGO, :OLD.SALARIO, :NEW.SALARIO, SYSDATE, USER, P_OPER);
    ELSIF DELETING THEN
        P_OPER := 'DELETE';
        INSERT INTO LOG_SALARIO
        (