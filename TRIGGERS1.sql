drop table empregados;
drop table log_salario;
drop trigger TRG_SALARIO_AUD;

CREATE TABLE EMPREGADOS (
    CODIGO INT NOT NULL PRIMARY KEY,
    NOME VARCHAR2 (20),
    SALARIO DECIMAL(10,2)
);

CREATE TABLE LOG_SALARIO (
    CODIGO INT,
    SALARIO_ANTERIOR DECIMAL(10,2),
    SALARIO_ATUAL DECIMAL(10,2),
    DATA_ALTERACAO DATE,
    USUARIO VARCHAR2(20),
    OPERACAO VARCHAR2(10)
);

CREATE OR REPLACE TRIGGER TRG_SALARIO_AUD
AFTER INSERT ON EMPREGADOS
FOR EACH ROW
BEGIN
    INSERT INTO LOG_SALARIO(CODIGO, SALARIO_ANTERIOR, SALARIO_ATUAL, DATA_ALTERACAO, USUARIO, OPERACAO)
    VALUES (:NEW.CODIGO, :OLD.SALARIO, :NEW.SALARIO, SYSDATE, USER,'');
END;


-- TESTE INSERT
INSERT INTO EMPREGADOS VALUES (1,'Peter',2999);
INSERT INTO EMPREGADOS VALUES (2,'John',3499);

SELECT * FROM EMPREGADOS;
SELECT * FROM LOG_SALARIO;

-- TESTE UPDATE
UPDATE EMPREGADOS SET SALARIO = SALARIO*1.10 WHERE CODIGO = '1';

-- DESABILITANDO TRIGGER
ALTER TRIGGER TRG_SALARIO_AUD DISABLE;

-- APÓS DISABLE
INSERT INTO EMPREGADOS VALUES (3,'MARY',4499);

-- HABILITANDO A TRIGGER
ALTER TRIGGER TRG_SALARIO_AUD ENABLE;

-- EXEMPLO COM OPERADORES
-- EXEMPLO STATEMENTS/DECLARACAO DE OPERADORES
CREATE OR REPLACE TRIGGER TRG_SALARIO_AUD
AFTER INSERT OR DELETE OR UPDATE ON EMPREGADOS
FOR EACH ROW
DECLARE
    P_OPER VARCHAR2(10);
BEGIN
    IF INSERTING THEN
        P_OPER := 'INSERE';
        INSERT INTO LOG_SALARIO
        (CODIGO, SALARIO_ANTERIOR, SALARIO_ATUAL, DATA_ALTERACAO, USUARIO, OPERACAO)
        VALUES
        (:NEW.CODIGO, NULL, :NEW.SALARIO, SYSDATE, USER, P_OPER);
        
    ELSIF UPDATING THEN
        P_OPER := 'ATUALIZA';
        INSERT INTO LOG_SALARIO
        (CODIGO, SALARIO_ANTERIOR, SALARIO_ATUAL, DATA_ALTERACAO, USUARIO, OPERACAO)
        VALUES
        (:NEW.CODIGO, :OLD.SALARIO, :NEW.SALARIO, SYSDATE, USER, P_OPER);
        
    ELSIF DELETING THEN
        P_OPER := 'DELETA';
        INSERT INTO LOG_SALARIO
        (CODIGO, SALARIO_ANTERIOR, SALARIO_ATUAL, DATA_ALTERACAO, USUARIO, OPERACAO)
        VALUES
        (:OLD.CODIGO, :OLD.SALARIO, NULL, SYSDATE, USER, P_OPER);
    END IF;
END;

-- TESTANDO
INSERT INTO EMPREGADOS VALUES (5,'LENNON',3499);

UPDATE EMPREGADOS SET SALARIO=SALARIO*1.05 WHERE CODIGO ='5';

DELETE FROM EMPREGADOS WHERE CODIGO='5';

SELECT * FROM LOG_SALARIO;

-- EXEMPLO DE TRIGGER DE RESTRICAO DE HORARIO
CREATE OR REPLACE TRIGGER TRG_RESTRICAO_EMP
BEFORE INSERT OR DELETE OR UPDATE
ON EMPREGADOS
REFERENCING NEW AS NEW OLD AS OLD
BEGIN
IF TO_NUMBER (TO_CHAR(SYSDATE, 'hh24')) NOT BETWEEN 9 AND 18
THEN
RAISE_APPLICATION_ERROR(-20001,'OPERACAO NÃO PODE SER EXECUTADA FORA DO HORARIO DE EXPEDIENTE.');
END IF;
END;



-- TESTANDO
INSERT INTO EMPREGADOS VALUES (5,'LENNON',3499);

UPDATE EMPREGADOS SET SALARIO=SALARIO*1.05 WHERE CODIGO ='5';

DELETE FROM EMPREGADOS WHERE CODIGO='5';

SELECT * FROM LOG_SALARIO;

